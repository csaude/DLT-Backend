package dlt.dltbackendmaster.service;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;

import org.springframework.stereotype.Service;

import dlt.dltbackendmaster.domain.Beneficiaries;
import dlt.dltbackendmaster.util.Utility;

@Service
public class VulnerabilityServiceImpl implements VulnerabilityService {

	@Override
	public boolean isVulnerable(Beneficiaries beneficiary) {

		LocalDate enrollmentDate = dateToLocalDate(beneficiary.getEnrollmentDate());

		if (enrollmentDate.isBefore(cOPStartDate()) && beneficiary.getVulnerable() == 1) {
			return true;
		}

		int vulnerabilities[] = getBeneficiaryVulnerabilities(beneficiary);

		int age = vulnerabilities[2];

		if (vulnerabilities[1] > 0) {
			return true;
		} else if (age > 14 && age < 18) {
			return vulnerabilities[0] > 1;
		} else {
			return vulnerabilities[0] > 0;
		}
	}

	private int[] getBeneficiaryVulnerabilities(Beneficiaries beneficiary) {
		int vulnerabilities[] = new int[3];

		int age = Utility.calculateAge(beneficiary.getDateOfBirth());
		vulnerabilities[2] = age;

		if (age > 8 && age < 18) {
			vulnerabilities[0] = beneficiary.getVbltHouseSustainer() + (beneficiary.getVbltIsStudent() == 0 ? 1 : 0)
					+ beneficiary.getVbltIsDeficient() + beneficiary.getVbltMarriedBefore()
					+ nullToZero(beneficiary.getVbltIdp());
			if (beneficiary.getVbltMultiplePartners() != null) {
				vulnerabilities[1] = (age < 15 && beneficiary.getVbltSexuallyActive() != 0 ? 1 : 0)
						+ beneficiary.getVbltPregnantOrHasChildren() + beneficiary.getVbltMultiplePartners()
						+ beneficiary.getVbltSexualExploitationTraffickingVictim() + beneficiary.getVbltVbgVictim()
						+ beneficiary.getVbltAlcoholDrugsUse() + beneficiary.getVbltStiHistory();
			}
		} else if (age > 17 && age < 25) {
			vulnerabilities[0] = beneficiary.getVbltIsDeficient() + nullToZero(beneficiary.getVbltIdp());
			if (beneficiary.getVbltMultiplePartners() != null) {
				vulnerabilities[1] = beneficiary.getVbltMultiplePartners()
						+ beneficiary.getVbltSexualExploitationTraffickingVictim() + beneficiary.getVbltSexWorker()
						+ beneficiary.getVbltVbgVictim() + beneficiary.getVbltAlcoholDrugsUse()
						+ beneficiary.getVbltStiHistory();
			}
		}

		return vulnerabilities;
	}

	private Byte nullToZero(Byte value) {
		return value == null ? 0 : value;
	}

	private LocalDate cOPStartDate() {
		LocalDate copStartDate = null;

		LocalDate today = LocalDate.now();

		int day = today.getDayOfMonth();
		int month = today.getMonthValue();
		int year = today.getYear();

		if (month < 9 || (month == 9 && day < 21)) {
			copStartDate = LocalDate.of(year - 1, 9, 21);
		} else if (month > 9 || (month == 9 && day > 20)) {
			copStartDate = LocalDate.of(year, 9, 21);
		}

		return copStartDate;
	}

	private LocalDate dateToLocalDate(Date dateToConvert) {
		return dateToConvert.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
	}

}
